@using DevExtremeAspNetCoreApp.Models
@using DevExtreme.AspNet.Mvc

@model ImtCalc

@{
    ViewBag.Title = "Расчет ИМТ";
}


<h2>Расчет ИМТ</h2>

<div style="padding-top: 30px" id="form">
    @(Html.DevExtreme().Form()
          .ID("Id")
          .ColCount(2)
          .FormData(Model)
          .LabelLocation(FormLabelLocation.Top)
          .MinColWidth(300)
          .ReadOnly(false)
          .ShowColonAfterLabel(true)
          .FormData(Model)
          .Items(items =>
          {
              items.AddGroup()
                  .Caption("Поля")
                  .Items(gItems =>
                  {
                      gItems.AddSimple().DataField("Weight")
                          .Label(l => l.Text("вес"))
                          .Editor(ed => ed.NumberBox()
                              .Value(107)
                              .Min(3)
                              .Max(500)
                              .ShowSpinButtons(true)
                              .ID("mWeight")
                              .OnValueChanged("onValueWeightChange"));
                      gItems.AddSimple().DataField("Height")
                          .Label(l => l.Text("рост"))
                          .Editor(ed => ed.NumberBox()
                              .Value(175.5)
                              .Min(50)
                              .Max(250)
                              .ID("mHeight")
                              .OnValueChanged("onValueHeightChange"));

                      gItems.AddSimple().Editor(e => e.TextBox().ID("result").Placeholder("результаты расчета"));
                  });
              items.AddSimple()
                  .ColSpan(3)
                  .Template(
                      @<text>
                          @( Html.DevExtreme().Button()
                                 .Text("Пыщь")
                                 .Width("100%")
                                 .UseSubmitBehavior(true)
                                 .Type(ButtonType.Success)
                                 .OnClick("saveClick")
                                //.FocusStateEnabled(false)
                                //.ActiveStateEnabled(false)
                                //.HoverStateEnabled(false)
                                )
                       </text>);

          }

          )
          )

</div>
<script>
    var storageKey = "stylingMode";
    var stylingMode = readStylingMode() || "filled";
    
    var height = @Model.Height;
    var weight = @Model.Weight;
    DevExpress.config({
        editorStylingMode: stylingMode
    });

    function onValueHeightChange(e) {
        height = e.value;
    }

    function onValueWeightChange(e) {
        weight = e.value;
    }

    function saveClick(e) {
        var result = e.validationGroup.validate();

        if (weight > 0 && height > 0) {

            var resultImt = 10000 * weight / (height * height) ;
            DevExpress.ui.notify("The task was saved successfully. " + resultImt, "success");} 
    }

    function readStylingMode() {
        var mode = localStorage.getItem(storageKey);
        localStorage.removeItem(storageKey);
        return mode;
    }

    function stylingModeChanged(e) {
        localStorage.setItem(storageKey, e.value);
        window.location.reload(true);
    }

    $(function() {
        $("#subject").dxValidator({
            validationRules: [{ type: "required" }]
        });
        DevExpress.validationEngine.validateGroup();
    });
</script>
