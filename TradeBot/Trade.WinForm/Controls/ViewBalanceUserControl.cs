using System;
using System.Linq;
using System.Threading.Tasks;
using WindowsFormApp.Properties;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraRichEdit.Model;
using Trader.Ancillary;

namespace WindowsFormApp.Controls
{
    public partial class ViewBalanceUserControl : DevExpress.XtraEditors.XtraUserControl, IBernControl
    {

        public ViewBalanceUserControl()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            _gridControlOrders.DataSource = new System.Collections.Generic.List<Binance.API.Csharp.Client.Models.Account.Order>() /* TODO: Assign the real data here.*/;
        }

#pragma warning disable CS1998 // This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.
        private async void beBalance_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
#pragma warning restore CS1998 // This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.
        {
            if (e.Button.Kind == ButtonPredefines.Undo)
            {
                BernAsync();
            }
        }

        private void _deLastView_EditValueChanged(object sender, EventArgs e)
        {

        }

        public async void BernAsync()
        {
            try
            {
                await GetServerTime();

                await GetAccountBalanceInfo();

                await GetPairInfo();

                await GetAllOrders();
                
            }
            catch (Exception exception)
            {
                _mePairInfo.Text = exception.Message;
                _meBalance.Text = exception.Message;
                //throw;
            }
        }

        private async Task GetAllOrders()
        {
            var orders = await Burse.GetAllOrders(Settings.Default.PairCurrency);
            

            _gridControlOrders.DataSource = orders.OrderBy(ord => ord.CalcTime);
        }

        private async Task GetPairInfo()
        {
            var pair = Settings.Default.PairCurrency;
            var strPairInfo = await Burse.AskAndBidPairInfo(pair);

            _mePairInfo.EditValue = strPairInfo.StringView;
        }

        private async Task GetAccountBalanceInfo()
        {
            var ai = await Burse.GetAccountInfo();
            var strBalance = "";
            foreach (var balance in ai.Balances)
            {
                if (balance.Free != 0m || balance.Locked != 0m)
                    strBalance += $"{balance}; {Environment.NewLine}";
            }
            _meBalance.EditValue = strBalance;
        }

        private async Task GetServerTime()
        {
            var servTime = await Burse.GetServerTime();
            if (servTime != null)
            {
                _deLastView.EditValue = servTime;
            }
        }

        public void Clean()
        {
            _meBalance.Text = "";
        }
        
        private async void sbCalc_Click(object sender, EventArgs e)
        {
            DateTime? startDate = _deStartCalc.EditValue != null ? _deStartCalc.DateTime : (DateTime?) null;
            DateTime? endDate = _deEndCalc.EditValue != null ? _deEndCalc.DateTime : (DateTime?) null;
            _meResultCalc.Text = await new ResultCalculator().CalculateResult(Settings.Default.PairCurrency, startDate, endDate);
        }

    }
}
