//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
namespace Trader
{

    /// <summary>
    /// Предсказание. Собирается визитерами по советам и линкуется к свечам
    /// </summary>
    public partial class Prediction : XPBaseObject
    {
        long fID;
        [Key(true)]
        public long ID
        {
            get { return fID; }
            set { SetPropertyValue<long>("ID", ref fID, value); }
        }
        string fConclusion;
        [Size(500)]
        [DevExpress.Xpo.DisplayName(@"Заключение")]
        public string Conclusion
        {
            get { return fConclusion; }
            set { SetPropertyValue<string>("Conclusion", ref fConclusion, value); }
        }
        string fInterpretation;
        /// <summary>
        /// Подробнейшим образом можно собрать объяснения со всех советов и выдавать их сюда, в предстказание
        /// </summary>
        [Size(SizeAttribute.Unlimited)]
        [DevExpress.Xpo.DisplayName(@"Объяснения")]
        public string Interpretation
        {
            get { return fInterpretation; }
            set { SetPropertyValue<string>("Interpretation", ref fInterpretation, value); }
        }
        int fAvgProbability;
        /// <summary>
        /// По этой вероятности можно рисовать стрелку от +90 до -90 градусов, с предсказанием куда пойдет тренд . Крутость направления дает нам более точную картину, по тому, кто больше правит рынком или быки с медведями вошли в равновесие. 
        /// </summary>
        [DevExpress.Xpo.DisplayName(@"Средняя вероятность")]
        public int AvgProbability
        {
            get { return fAvgProbability; }
            set { SetPropertyValue<int>("AvgProbability", ref fAvgProbability, value); }
        }
        Candle fCandle;
        [Association(@"PredictionReferencesCandle")]
        [DevExpress.Xpo.DisplayName(@"Свеча")]
        public Candle Candle
        {
            get { return fCandle; }
            set { SetPropertyValue<Candle>("Candle", ref fCandle, value); }
        }
        decimal? fVolume;
        [DevExpress.Xpo.DisplayName(@"Значение предсказания")]
        public decimal? Volume
        {
            get { return fVolume; }
            set { SetPropertyValue<decimal?>("Volume", ref fVolume, value); }
        }
        [Association(@"BalanceReferencesPrediction")]
        public XPCollection<Balance> Balances { get { return GetCollection<Balance>("Balances"); } }
    }

}
