//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
namespace Trader
{

    /// <summary>
    /// Это наследник совета.
    /// На этот объект ссылается предсказание. которое ссылается на свечу.
    /// Т.е. у свечи всегда есть ссылка More-to-More к справочнику и NSI_Advice
    /// Они вычисляются в первую очередь после создания цепи свечей.
    /// Вычисляются валидатором по необходимости.
    /// </summary>
    public partial class Nsi_MovingAverage : Nsi_Advice
    {
        short fDepth;
        [DevExpress.Xpo.DisplayName(@"Глубина скольжения")]
        public short Depth
        {
            get { return fDepth; }
            set { SetPropertyValue<short>("Depth", ref fDepth, value); }
        }
        Trader.Model.MovingAverageTypeEnum fMovAvgType;
        [DevExpress.Xpo.DisplayName(@"Разновидность скользящей")]
        public Trader.Model.MovingAverageTypeEnum MovAvgType
        {
            get { return fMovAvgType; }
            set { SetPropertyValue<Trader.Model.MovingAverageTypeEnum>("MovAvgType", ref fMovAvgType, value); }
        }
        Trader.Model.PriceTypeEnum fPriceType;
        [DevExpress.Xpo.DisplayName(@"Тип расчетной цены")]
        public Trader.Model.PriceTypeEnum PriceType
        {
            get { return fPriceType; }
            set { SetPropertyValue<Trader.Model.PriceTypeEnum>("PriceType", ref fPriceType, value); }
        }
    }

}
