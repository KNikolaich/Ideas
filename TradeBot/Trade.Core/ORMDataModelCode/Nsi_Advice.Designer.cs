//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
namespace Trader
{

    /// <summary>
    /// Справочник сигналов (советов). Имеет наследников для конкретики сигналов.
    /// </summary>
    public partial class Nsi_Advice : XPBaseObject
    {
        long fID;
        [Key(true)]
        public long ID
        {
            get { return fID; }
            set { SetPropertyValue<long>("ID", ref fID, value); }
        }
        string fModelName;
        [Size(255)]
        [DevExpress.Xpo.DisplayName(@"Наименование модели")]
        public string ModelName
        {
            get { return fModelName; }
            set { SetPropertyValue<string>("ModelName", ref fModelName, value); }
        }
        string fPremise;
        [Size(500)]
        [DevExpress.Xpo.DisplayName(@"Предпосылка")]
        public string Premise
        {
            get { return fPremise; }
            set { SetPropertyValue<string>("Premise", ref fPremise, value); }
        }
        string fExplanation;
        [Size(SizeAttribute.Unlimited)]
        [DevExpress.Xpo.DisplayName(@"Разъяснения")]
        public string Explanation
        {
            get { return fExplanation; }
            set { SetPropertyValue<string>("Explanation", ref fExplanation, value); }
        }
        int fProbability;
        /// <summary>
        /// содержит значение от -90 до +90, по которому можно предполагать , и куда пойдет тренд и с какой вероятностью это произойдет.
        /// </summary>
        [DevExpress.Xpo.DisplayName(@"Вероятность")]
        public int Probability
        {
            get { return fProbability; }
            set { SetPropertyValue<int>("Probability", ref fProbability, value); }
        }
        byte? fImage;
        [DevExpress.Xpo.DisplayName(@"Картинка с примером")]
        public byte? Image
        {
            get { return fImage; }
            set { SetPropertyValue<byte?>("Image", ref fImage, value); }
        }
        bool fActive;
        [DevExpress.Xpo.DisplayName(@"Активен")]
        public bool Active
        {
            get { return fActive; }
            set { SetPropertyValue<bool>("Active", ref fActive, value); }
        }
    }

}
